// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-08-10 03:08:50
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-08-10 03:15:27
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  // #extension GL_OES_standard_derivatives: enable
  precision highp float;

  #include <cc-global>
  #include <cc-local>
  #include <sdf>

  in vec4 v_color;
  in vec2 v_uv0;
  in vec2 v_uv1;

  uniform sampler2D texture;

  void main()
  {
    vec2 uv = v_uv0.xy;
    float D = GetD(texture, uv);

    // Glow effect from Gustavson's paper
    float inside = smoothstep(-2.0, 2.0, D);
    float glow = smoothstep(-14.0, 2., D);
    vec3 insideColor = vec3(1.0, 1.0, 0.0);
    vec3 glowColor = vec3(1.0, 0.3, 0.0);
    vec3 fragColor = mix(glowColor, insideColor, inside);
    gl_FragColor = vec4(fragColor, glow);
  }
}%
