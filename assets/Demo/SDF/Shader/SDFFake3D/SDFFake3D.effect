// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-08-10 17:45:59
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-08-10 17:57:15
*/ 


CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  #extension GL_OES_standard_derivatives: enable
  precision highp float;

  #include <cc-global>
  #include <cc-local>
  #include <sdf>

  in vec4 v_color;
  in vec2 v_uv0;
  in vec2 v_uv1;

  uniform sampler2D texture;

  void main()
  {
    vec2 uv = v_uv0.xy;
    float D = GetD(texture, uv);
    float aastep = fwidth(D);

    // do a simple color mix, note the AA is not accurate
    // float mask = smoothstep(-aastep, aastep, D);
    vec2 delta = vec2(dFdx(D), dFdy(D));
    vec2 lightPos = vec2(1., -1.);
    float brightNess = dot(delta, lightPos);

    // edge width/2, in pixel
    float w = 4.;

    // edge range, [-2w, 0]
    float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);

    // inside range, (0, +)
    float insideMask = smoothstep(-aastep, aastep, D);

    // map [-1,1] to [0, 1]
    delta = delta * 0.5 + 0.5;

    // mix color
    vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;

    // be golden
    color *= vec3(1., 213./255., 0.);
    gl_FragColor = vec4(color, edgeMask + insideMask);
  }
}%
