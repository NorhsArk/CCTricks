// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-08-11 14:39:15
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-08-11 14:40:09
*/ 
// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
          blendSrcAlpha: one
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  
  in float a_index;
  out float v_index;
  out vec4 v_lineFlags;

  in float a_dist;
  out float v_dist;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * cc_matWorld * pos;

    // v_color = a_color;
    v_index = a_index;
    v_lineFlags.x = floor(a_index * 0.5);       // 0-1连线等高
    v_lineFlags.y = floor((a_index + 1.) * 0.5); // 1-2连线等高

    v_dist = a_dist;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  #if CC_SUPPORT_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  
  #include <cc-global>
  #include <alpha-test>

  in float v_index;
  in vec4 v_lineFlags;
  in float v_dist;

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d-c) + c;
  }

  // 脉冲函数
  // X,Y区间都是[0,1]，X=0.5位置Y=1
  // https://www.iquilezles.org/www/articles/functions/functions.htm
  float Pulse(float x) {
    return pow(4.0 * x * (1.0 - x), 16.0);
  }

  void main () {
    #if CC_SUPPORT_standard_derivatives
      float aa = fwidth(v_dist);
    #else
      float aa = 0.05;
    #endif
    
#define TEST_VERSION 2
#if TEST_VERSION == 0
    // abs(v_dist): [1...0...1]
    // float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);
    float alpha = smoothstep(aa, -aa, abs(v_dist) - 0.5);
    gl_FragColor = vec4(alpha);
#elif TEST_VERSION == 1
    float alpha = v_dist * 0.5 + 0.5;

    // 轮廓宽度(0.0, 1.0), 对应alpha区域
    float outlineWidth = 0.4;

    // 选择一个alpha值做为轮廓的中线
    float centerAlpha = 0.5;

    float alphaDist = abs(alpha - centerAlpha);
    float mask = smoothstep(outlineWidth, 0., alphaDist);
    vec4 col = vec4(vec3(1.,0.,1.), mask);
    
    // 底色基础上叠加一个亮度，叠加后中心位置变白
    // 对亮度做一个动画
    float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));
    col.rgb += Pulse((alphaDist + 0.5)) * brightness;

    col.rgb *= col.a;
    gl_FragColor = col;
#elif TEST_VERSION == 2
    // 展示网格化
    // substract by nearest integer to generate distance field
    // vec2 flags = abs(v_lineFlags.xy - floor(v_lineFlags.xy + 0.5));
    // // vec2 aa2 = fwidth(abs(flags));
    // vec2 delta1 = vec2(dFdx(flags.x), dFdy(flags.x));
    // vec2 delta2 = vec2(dFdx(flags.y), dFdy(flags.y));
    // vec2 aa2 = vec2(length(delta1), length(delta2));// * 0.7;
    // vec2 lineMask = smoothstep(vec2(1.), vec2(0.0), flags);
    // // float mask = max(lineMask.x, lineMask.y);
    // float mask = max(lineMask.x, 0.);//lineMask.y);
    // // vec2 t = floor(v_lineFlags.xy) / 25.;   // 拆分两个点

    // mask = flags.x;
    vec2 ff = fract(v_lineFlags.xy);
    float green = min(ff.x, ff.y);
    green = 0.3 + min(green, 0.7);
    gl_FragColor = vec4(0., green, 0., 1.0);

    // float flag = v_lineFlags.y - floor(v_lineFlags.y + 0.5);
    // float aax = fwidth(abs(flag));

    // vec4 color = vec4(abs(flag), aax, -aax, 1.);
    // gl_FragColor = color;
#endif


    // o.rgb *= o.a;
    // o *= alpha;

    // gl_FragColor = o;
    // // gl_FragColor = vec4(abs(v_dist));
  }
}%
