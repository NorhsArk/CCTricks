{
  "ver": "1.0.25",
  "uuid": "86810400-7956-4166-b487-0a9d781d50b0",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  varying float v_dist;\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main () {\n    vec4 o = v_color;\n    ALPHA_TEST(o);\n    #if CC_SUPPORT_standard_derivatives\n      float aa = fwidth(v_dist);\n    #else\n      float aa = 0.05;\n    #endif\n    float alpha = v_dist * 0.5 + 0.5;\n    float outlineWidth = 0.4;\n    float centerAlpha = 0.5;\n    float alphaDist = abs(alpha - centerAlpha);\n    float mask = smoothstep(outlineWidth, 0., alphaDist);\n    vec4 col = vec4(vec3(1.,0.,1.), mask);\n    float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));\n    col.rgb += Pulse((alphaDist + 0.5)) * brightness;\n    col.rgb *= col.a;\n    gl_FragColor = col;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  in float v_dist;\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    return pow(4.0 * x * (1.0 - x), 16.0);\n  }\n  void main () {\n    vec4 o = v_color;\n    ALPHA_TEST(o);\n    #if CC_SUPPORT_standard_derivatives\n      float aa = fwidth(v_dist);\n    #else\n      float aa = 0.05;\n    #endif\n    float alpha = v_dist * 0.5 + 0.5;\n    float outlineWidth = 0.4;\n    float centerAlpha = 0.5;\n    float alphaDist = abs(alpha - centerAlpha);\n    float mask = smoothstep(outlineWidth, 0., alphaDist);\n    vec4 col = vec4(vec3(1.,0.,1.), mask);\n    float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));\n    col.rgb += Pulse((alphaDist + 0.5)) * brightness;\n    col.rgb *= col.a;\n    gl_FragColor = col;\n  }"
      }
    }
  ],
  "subMetas": {}
}