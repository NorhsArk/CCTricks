// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-08-20 23:48:00
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-08-21 00:31:01
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white, inspector: { displayName: '贴图' } }
        size: { value: [15.0, 20.0, 0.666667, 0.05], inspector: { displayName: '片段大小', tooltip: '(单位px)长、宽、1/长、1/宽'} } 
        uv_shift: { value: [0., 0.], inspector: { displayName: 'UV时间偏移', tooltip: '每秒偏移量'} } 
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  
  in float a_width;
  out float v_width;

  in float a_dist;
  out float v_dist;

  void main () {
    vec4 pos = vec4(a_position, 1);
    // pos = cc_matViewProj * cc_matWorld * pos;
    pos = cc_matViewProj * pos;

    v_width = a_width;
    v_dist = a_dist;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  #if CC_SUPPORT_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  
  #include <cc-global>

  in float v_width;
  in float v_dist;

  uniform sampler2D texture;
  uniform UARGS {
    vec4 size;
    vec2 uv_shift;
  };

  void main () {
#if USE_TEXTURE
    vec2 uv = fract(vec2(v_dist, v_width) * size.zw);

  #if UV_CROSS_SEGMENT
    // UV跨分段
    uv.x = fract(v_dist / size.y);
  #endif

  #if UV_SHIFT_BY_TIME
    uv = fract(uv_shift * -cc_time.x + uv);
  #endif

  // #if NORMALIZE_UV
  //   // 长宽归一化。todo: 偏移到中心位置
  //   uv *= max(vec2(1.0), size.xy * size.wz);
  // #endif

    // TODO: handle fadeout
    float fadeDist = 200.;
    float alpha = clamp(v_dist / fadeDist, 0.01, 1.);

    // scale uv.y
    float scale_inv = 1./alpha;
    uv.y = uv.y * scale_inv + (1.0 - scale_inv) * 0.5;

    vec4 color = texture2D(texture, uv);
    color.a *= alpha;
#else

    vec4 color = vec4(1., 0., 1., 1.);
#endif

    gl_FragColor = color;
  }
}%
