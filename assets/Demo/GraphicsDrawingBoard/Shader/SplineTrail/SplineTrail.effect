// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-08-20 23:48:00
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-08-21 00:31:01
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  
  in float a_side_dist;
  out float v_side_dist;

  in float a_dist;
  out float v_dist;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * cc_matWorld * pos;

    v_side_dist = a_side_dist;
    v_dist = a_dist;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  #if CC_SUPPORT_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  
  #include <cc-global>
  #include <alpha-test>

  in float v_side_dist;
  in float v_dist;

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d-c) + c;
  }

  // 脉冲函数
  // X,Y区间都是[0,1]，X=0.5位置Y=1
  // https://www.iquilezles.org/www/articles/functions/functions.htm
  float Pulse(float x) {
    x *= 0.4;
    x = x + 0.5;
    
    float k = 16.;
    return pow(4.0 * x * (1.0 - x), k);
  }

  void main () {
    float alpha = abs(v_side_dist);
    float dist = fract(v_dist / 60.);

    // 轮廓宽度(0.0, 1.0), 对应alpha区域
    float outlineWidth = 1.0;

    // 选择一个alpha值做为轮廓的中线
    float centerAlpha = 0.;

    float alphaDist = abs(alpha - centerAlpha);
    float mask = smoothstep(outlineWidth, 0., alphaDist);
    vec4 col = vec4(vec3(1.,0.,1.), mask);
    
    // 底色基础上叠加一个亮度，叠加后中心位置变白
    // 对亮度做一个动画
    float brightness = Remap(0., 1., 0.6, 1.0, abs(sin(cc_time.x * 2.5)));
    // col.rgb = vec3(0.);
    col.rgb += Pulse(alphaDist) * brightness;

    col.a *= dist;
    gl_FragColor = col;
  }
}%
