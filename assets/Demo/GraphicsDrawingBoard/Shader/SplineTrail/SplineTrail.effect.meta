{
  "ver": "1.0.25",
  "uuid": "82b16941-7e29-4937-9b70-37d531b5e944",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute float a_side_dist;\nvarying float v_side_dist;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_side_dist = a_side_dist;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform vec4 cc_time;\n  varying float v_side_dist;\n  varying float v_dist;\n  uniform sampler2D texture;\n  uniform vec4 size;\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    x *= 0.4;\n    x = x + 0.5;\n    float k = 16.;\n    return pow(4.0 * x * (1.0 - x), k);\n  }\n  void main () {\n#if USE_TEXTURE\n    vec2 uv = vec2(v_side_dist * 0.5 + 0.5, fract(v_dist / size.x));\n  #if NORMALIZE_SIZE\n    uv *= max(vec2(1.0), size.wz);\n  #endif\n    vec4 color = texture2D(texture, uv);\n    gl_FragColor = color;\n#elif BLOOM\n    float alpha = abs(v_side_dist);\n    float dist = fract(v_dist / 60.);\n    float outlineWidth = 1.0;\n    float centerAlpha = 0.;\n    float alphaDist = abs(alpha - centerAlpha);\n    float mask = smoothstep(outlineWidth, 0., alphaDist);\n    vec4 col = vec4(vec3(1.,0.,1.), mask);\n    float brightness = Remap(0., 1., 0.6, 1.0, abs(sin(cc_time.x * 2.5)));\n    col.rgb += Pulse(alphaDist) * brightness;\n    col.a *= dist;\n    gl_FragColor = col;\n#else\n    vec2 uv = vec2(v_side_dist * 0.5 + 0.5, fract(v_dist / size.x));\n    uv *= vec2(max(1.0, size.w), max(1.0, size.z));\n    vec4 color = texture2D(texture, uv);\n    gl_FragColor = color;\n#endif\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin float a_side_dist;\nout float v_side_dist;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_side_dist = a_side_dist;\n  v_dist = a_dist;\n  gl_Position = pos;\n}",
        "frag": "\n  #if CC_SUPPORT_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n  #endif\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in float v_side_dist;\n  in float v_dist;\n  uniform sampler2D texture;\n  uniform UARGS {\n    vec4 size;\n    float ttt;\n  };\n  float Remap01(float a, float b, float t) {\n    return (t-a) / (b-a);\n  }\n  float Remap(float a, float b, float c, float d, float t) {\n    return Remap01(a, b, t) * (d-c) + c;\n  }\n  float Pulse(float x) {\n    x *= 0.4;\n    x = x + 0.5;\n    float k = 16.;\n    return pow(4.0 * x * (1.0 - x), k);\n  }\n  void main () {\n#if USE_TEXTURE\n    vec2 uv = vec2(v_side_dist * 0.5 + 0.5, fract(v_dist / size.x));\n  #if NORMALIZE_SIZE\n    uv *= max(vec2(1.0), size.wz);\n  #endif\n    vec4 color = texture2D(texture, uv);\n    gl_FragColor = color;\n#elif BLOOM\n    float alpha = abs(v_side_dist);\n    float dist = fract(v_dist / 60.);\n    float outlineWidth = 1.0;\n    float centerAlpha = 0.;\n    float alphaDist = abs(alpha - centerAlpha);\n    float mask = smoothstep(outlineWidth, 0., alphaDist);\n    vec4 col = vec4(vec3(1.,0.,1.), mask);\n    float brightness = Remap(0., 1., 0.6, 1.0, abs(sin(cc_time.x * 2.5)));\n    col.rgb += Pulse(alphaDist) * brightness;\n    col.a *= dist;\n    gl_FragColor = col;\n#else\n    vec2 uv = vec2(v_side_dist * 0.5 + 0.5, fract(v_dist / size.x));\n    uv *= vec2(max(1.0, size.w), max(1.0, size.z));\n    vec4 color = texture2D(texture, uv);\n    gl_FragColor = color;\n#endif\n  }"
      }
    }
  ],
  "subMetas": {}
}