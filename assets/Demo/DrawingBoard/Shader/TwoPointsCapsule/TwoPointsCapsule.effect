// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-09 21:11:36
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-30 11:19:30
*/ 

CCEffect %{
    techniques:
    - passes:
        - vert: vs
          frag: fs
          blendState:
              targets:
              - blend: true
          rasterizerState:
              cullMode: none
          properties:
              texture: { value: white }
              PP: { value: [0.5, 0., 0., 0.5] }
}%

CCProgram vs %{
    precision highp float;

    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;

    in vec2 a_uv0;
    out vec2 v_uv0;
    
    void main() {
        vec4 pos = vec4(a_position, 1);
        pos = cc_matViewProj * pos;
        v_uv0 = a_uv0;
        v_uv0.y = 1.0 - v_uv0.y;  // flip y

        v_color = a_color;
        gl_Position = pos;
    }
}%

// credit to https://www.shadertoy.com/view/ltXSDB
CCProgram fs %{
    precision highp float;

    #include <cc-global>
    #include <cc-local>

    #define PI 3.14159265
    
    in vec4 v_color;
    in vec2 v_uv0;

    uniform sampler2D texture;
    // uniform sampler2D tex2;
    uniform UARGS {
        vec4 PP;
    };

    float Capsule(vec2 p, float o, float width, float height, float blur) {
        float d = distance(p, vec2(0., clamp(p.y, o - height * 0.5, o + height * 0.5)));
        return d;
    }

    mat2 Rotate2d(float angle) {
        return mat2(cos(angle), -sin(angle),
                    sin(angle), cos(angle));
    }

    mat2 Rotate2d2(float cosine, float sine) {
        return mat2(cosine, -sine, sine, cosine);
    }

    void main()
    {
        vec2 uv = v_uv0.xy;
        uv = uv * 2. - 1.;
        uv.y *= 1280./720.;

        float height = 0.01;
        float width = 0.01;
        float blur = 4. / 720.;
        
    #if 1
        // todo: handle tiny dist
        float dist = distance(PP.xy, PP.zw);
        vec2 mid = (PP.xy + PP.zw) * 0.5;
        uv -= mid;

        vec2 cs = (PP.xy - PP.zw) / dist;
        uv = Rotate2d2(-cs.y, cs.x) * uv;
        height = dist;
    #else
        uv -= vec2(0.25, 0.25);
        uv = Rotate2d(PI * 0.25) * uv;
        height = sqrt(2.) * 0.5;
    #endif

        float mask = Capsule(uv, 0., width, height, blur);
        // // float mask = sdBezierIQ(uv, AA, BB, CC);
        // float mask = sdBezierIQ(uv, AA, BB, CC);
        mask = smoothstep(width, width-blur, mask);

        // vec3 color = vec3(0.);
        // color.xy += uv.xy;
        // color += mask;

        // vec4 col = max(vec4(mask), texture(tex2, v_uv0));
        vec4 col = v_color * mask;
        gl_FragColor = col;
    }
}%
