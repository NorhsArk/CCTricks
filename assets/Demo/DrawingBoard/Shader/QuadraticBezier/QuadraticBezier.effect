/*
 * Author: GT<caogtaa@gmail.com>
 * Date: 2021-05-30 11:00:37
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-30 11:22:18
*/


CCEffect %{
    techniques:
    - passes:
        - vert: vs
          frag: fs
          blendState:
              targets:
              - blend: true
          rasterizerState:
              cullMode: none
          properties:
              texture: { value: white }
              PA: { value: [0., 0.] }
              PB: { value: [0., 0.] }
              PC: { value: [0., 0.] }
}%

CCProgram vs %{
    precision highp float;

    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    in vec4 a_color;
    out vec4 v_color;

    in vec2 a_uv0;
    out vec2 v_uv0;
    
    void main() {
        vec4 pos = vec4(a_position, 1);
        pos = cc_matViewProj * pos;
        v_uv0 = a_uv0;
        v_uv0.y = 1.0 - v_uv0.y;  // flip y

        v_color = a_color;
        gl_Position = pos;
    }
}%

CCProgram fs %{
    precision highp float;

    #include <cc-global>
    #include <cc-local>

    #define PI 3.14159265
    
    in vec4 v_color;
    in vec2 v_uv0;

    uniform sampler2D texture;
    // uniform sampler2D tex2;
    uniform UARGS {
        vec2 PA;
        vec2 PB;        // 控制点，在外部根据途经点m计算控制点 PB = (4.0 * m - PA - PC) / 2.0
        vec2 PC;
    };

    float dot2( in vec2 v ) { return dot(v,v); }

    // https://www.shadertoy.com/view/MlKcDD
    // The MIT License
    // Copyright © 2018 Inigo Quilez
    float sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )
    {    
        vec2 a = B - A;
        vec2 b = A - 2.0*B + C;
        vec2 c = a * 2.0;
        vec2 d = A - pos;
        float kk = 1.0/dot(b,b);
        float kx = kk * dot(a,b);
        float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
        float kz = kk * dot(d,a);      
        float res = 0.0;
        float p = ky - kx*kx;
        float p3 = p*p*p;
        float q = kx*(2.0*kx*kx-3.0*ky) + kz;
        float h = q*q + 4.0*p3;
        if( h >= 0.0) 
        { 
            h = sqrt(h);
            vec2 x = (vec2(h,-h)-q)/2.0;
            vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
            float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
            res = dot2(d + (c + b*t)*t);
        }
        else
        {
            float z = sqrt(-p);
            float v = acos( q/(p*z*2.0) ) / 3.0;
            float m = cos(v);
            float n = sin(v)*1.732050808;
            vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);
            res = min( dot2(d+(c+b*t.x)*t.x),
                    dot2(d+(c+b*t.y)*t.y) );
            // the third root cannot be the closest
            // res = min(res,dot2(d+(c+b*t.z)*t.z));
        }
        return sqrt( res );
    }

    void main()
    {
        vec2 uv = v_uv0.xy;
        uv = uv * 2. - 1.;
        uv.y *= 1280./720.;

        float width = 0.01;
        float blur = 4. / 720.;
        float mask = sdBezier(uv, PA, PB, PC);
        mask = smoothstep(width, width-blur, mask);

        // vec4 col = max(vec4(mask), texture(tex2, v_uv0));
        vec4 col = v_color * mask;
        gl_FragColor = col;
    }
}%
